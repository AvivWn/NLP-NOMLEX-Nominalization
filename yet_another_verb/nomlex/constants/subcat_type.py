from enum import Enum


class SubcatType(str, Enum):
	NOM_INTRANS = "NOM-INTRANS"
	NOM_INTRANS_RECIP = "NOM-INTRANS-RECIP"
	NOM_PART = "NOM-PART"

	NOM_NP = "NOM-NP"
	NOM_PART_NP = "NOM-PART-NP"
	NOM_NP_NP = "NOM-NP-NP"
	NOM_PP = "NOM-PP"
	NOM_PART_PP = "NOM-PART-PP"
	NOM_PP_PP = "NOM-PP-PP"
	NOM_NP_PP = "NOM-NP-PP"
	NOM_PART_NP_PP = "NOM-PART-NP-PP"
	NOM_NP_TO_NP = "NOM-NP-TO-NP"
	NOM_NP_FOR_NP = "NOM-NP-FOR-NP"
	NOM_NP_PP_PP = "NOM-NP-PP-PP"

	NOM_ADVP = "NOM-ADVP"
	NOM_NP_ADVP = "NOM-NP-ADVP"
	NOM_ADVP_PP = "NOM-ADVP-PP"

	NOM_NP_AS_ING = "NOM-NP-AS-ING"
	NOM_NP_AS_ADJP = "NOM-NP-AS-ADJP"
	NOM_AS_NP = "NOM-AS-NP"
	NOM_PART_AS_NP = "NOM-PART-AS-NP"
	NOM_NP_AS_NP = "NOM-NP-AS-NP"
	NOM_PART_NP_AS_NP = "NOM-PART-NP-AS-NP"
	NOM_NP_AS_NP_SC = "NOM-NP-AS-NP-SC"
	NOM_NP_PP_AS_NP = "NOM-NP-PP-AS-NP"

	NOM_ING_SC = "NOM-ING-SC"
	NOM_PART_ING_SC = "NOM-PART-ING-SC"
	NOM_NP_ING = "NOM-NP-ING"
	NOM_NP_ING_OC = "NOM-NP-ING-OC"
	NOM_NP_ING_SC = "NOM-NP-ING-SC"
	NOM_P_ING_SC = "NOM-P-ING-SC"
	NOM_NP_P_ING = "NOM-NP-P-ING"
	NOM_NP_P_ING_OC = "NOM-NP-P-ING-OC"
	NOM_NP_P_ING_SC = "NOM-NP-P-ING-SC"
	NOM_P_NP_ING = "NOM-P-NP-ING"
	NOM_NP_P_NP_ING = "NOM-NP-P-NP-ING"

	NOM_POSSING = "NOM-POSSING"
	NOM_P_POSSING = "NOM-P-POSSING"
	NOM_PP_P_POSSING = "NOM-PP-P-POSSING"
	NOM_POSSING_PP = "NOM-POSSING-PP"
	NOM_NP_P_POSSING = "NOM-NP-P-POSSING"

	NOM_FOR_TO_INF = "NOM-FOR-TO-INF"
	NOM_NP_TO_INF_OC = "NOM-NP-TO-INF-OC"
	NOM_NP_TO_INF_SC = "NOM-NP-TO-INF-SC"
	NOM_NP_TO_INF_VC = "NOM-NP-TO-INF-VC"
	NOM_TO_INF_SC = "NOM-TO-INF-SC"
	NOM_P_NP_TO_INF_OC = "NOM-P-NP-TO-INF-OC"
	NOM_P_NP_TO_INF = "NOM-P-NP-TO-INF"
	NOM_P_NP_TO_INF_VC = "NOM-P-NP-TO-INF-VC"
	NOM_PP_FOR_TO_INF = "NOM-PP-FOR-TO-INF"

	NOM_S = "NOM-S"
	NOM_THAT_S = "NOM-THAT-S"
	NOM_S_SUBJUNCT = "NOM-S-SUBJUNCT"
	NOM_NP_S = "NOM-NP-S"
	NOM_PP_THAT_S = "NOM-PP-THAT-S"
	NOM_PP_THAT_S_SUBJUNCT = "NOM-PP-THAT-S-SUBJUNCT"
	NOM_NP_AS_IF_S_SUBJUNCT = "NOM-NP-AS-IF-S-SUBJUNCT"

	NOM_WH_S = "NOM-WH-S"
	NOM_WHERE_WHEN_S = "NOM-WHERE-WHEN-S"
	NOM_HOW_S = "NOM-HOW-S"
	NOM_PP_HOW_TO_INF = "NOM-PP-HOW-TO-INF"
	NOM_NP_WH_S = "NOM-NP-WH-S"
	NOM_P_WH_S = "NOM-P-WH-S"
	NOM_PP_WH_S = "NOM-PP-WH-S"
	NOM_PP_P_WH_S = "NOM-PP-P-WH-S"
	NOM_NP_P_WH_S = "NOM-NP-P-WH-S"

	@staticmethod
	def is_transitive(subcat_type: 'SubcatType') -> bool:
		return subcat_type.startswith(SubcatType.NOM_NP) or \
			subcat_type.startswith(SubcatType.NOM_PART_NP)

	@staticmethod
	def is_intransitive(subcat_type: 'SubcatType') -> bool:
		return not SubcatType.is_transitive(subcat_type)


SUBCAT_TYPES = {t for t in SubcatType}
